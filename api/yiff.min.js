// @ts-nocheck
export default async function handler(t,e){const{slug:n,embed:o=!1}=t.query;if(!n)return e.status(400).json({error:"Invalid or missing post ID and extension"});const[r,a]=n.split(".");if(!/^\d+$/.test(r))return e.status(400).json({error:"Invalid post ID"});const s=t.headers.host||"",i=s.includes("e926")?"e926.net":"e621.net",c=`https://${i}/posts/${r}.json`;try{const t=await fetch(c,{headers:{"User-Agent":"MyE621Proxy/1.0 (by yourusername on e621)"}});if(!t.ok)return e.status(t.status).json({error:"Failed to fetch post data"});const n=await t.json(),g=n?.post,y=a??g.file.ext;if(!g||!g.file?.url)return e.status(404).json({error:"Media URL not found in post data"});const h=await fetch(g.file.url,{headers:{"User-Agent":"MyE621Proxy/1.0 (by yourusername on e621)"}});if("true"===o){const t=g.preview?.url,n=`https://${s}/${r}.${y}`,o=["webm","mp4"].includes(y);var m,l="",p=g.tags.artist.concat(g.tags.contributor),d=["sound_warning","third-party_edit"],u=p.filter((t=>!d.includes(t)));(g.tags.artist.includes("sound_warning")||g.tags.meta.includes("sound")&&!g.tags.meta.includes("no_sound"))&&(l='<meta property="og:description" content="ðŸ”Š Sound Warning! ðŸ”Š" />'),1==u.length?(m=`${u[0]}`,console.log(u)):(m=`${u[0]} +${u.length-1}`,console.log(u));const a=`\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <meta charset="UTF-8">\n          <meta name="viewport" content="width=device-width, initial-scale=1.0">\n          <meta name="theme-color" content="#00549e" />\n          <link rel="icon" href="/favicon.ico" />\n          <link rel="apple-touch-icon" href="/favicon.png" />\n          <meta property="title" content="#${r}" />\n          \n\n          \x3c!-- Open Graph --\x3e\n          <meta property="og:title" content="#${r} by ${m}" />\n          ${l}\n          <meta property="og:type" content="${o?"video.other":"image"}" />\n          ${o?`\n            <meta property="og:video" content="${n}" />\n            <meta property="og:video:type" content="video/${y}" />\n            <meta property="og:video:width" content="1280" />\n            <meta property="og:video:height" content="720" />\n            <meta property="og:image" content="${t}" />\n            <meta property="og:site_name" content="Video from ${i} â€¢ e179 (${s})">\n          `:`\n            <meta property="og:image" content="${n}" />\n            <meta property="og:site_name" content="Image from ${i} â€¢ e179 (${s})">\n          `}\n\n          \x3c!-- Twitter --\x3e\n          <meta name="twitter:card" content="${o?"player":"summary_large_image"}" />\n          <meta name="twitter:title" content="Post from ${i}" />\n          ${o?`\n            <meta name="twitter:image" content="${t}" />\n            <meta name="twitter:player" content="${n}" />\n            <meta name="twitter:player:width" content="1280" />\n            <meta name="twitter:player:height" content="720" />\n            <meta name="twitter:player:stream" content="${n}" />\n            <meta name="twitter:player:stream:content_type" content="video/${y}" />\n          `:`\n            <meta name="twitter:image" content="${n}" />\n          `}\n        </head>\n        <body>\n            <script>console.log(${u}<\/script>\n        </body>\n        </html>\n      `.trim();return e.setHeader("Content-Type","text/html"),e.status(200).send(a)}if(!h.ok)return e.status(h.status).json({error:"Failed to fetch image"});const $=await h.arrayBuffer(),f=Buffer.from($),w=h.headers.get("content-type")||"image/jpeg";return e.setHeader("Content-Disposition",`inline; filename="${r}.${y}"`),e.setHeader("Cache-Control","public, max-age=86400"),e.setHeader("Content-Type",w),e.setHeader("Access-Control-Allow-Origin","*"),e.status(200).send(f)}catch(t){return console.error("Error:",t),e.status(500).json({error:"Failed to fetch from API",details:t.message})}}