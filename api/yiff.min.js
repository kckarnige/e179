// @ts-nocheck
export default async function handler(t,e){const{slug:n,embed:r=!1}=t.query;if(!n)return e.status(400).json({error:"Invalid or missing post ID and extension"});const[o,a]=n.split(".");if(!/^\d+$/.test(o))return e.status(400).json({error:"Invalid post ID"});const i=t.headers.host||"",s=i.includes("e926")?"e926.net":"e621.net",c=`https://e621.net/posts/${o}.json`;function p(t=""){return String(t).replace(/[&<>"']/g,(t=>({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#039;"}[t])))}try{const t=await fetch(c,{headers:{"User-Agent":"e179/1.0"}});if(!t.ok)return e.status(t.status).json({error:"Failed to fetch post data"});const n=await t.json(),m=n?.post,l=a??m?.file?.ext;if("json"===a)return e.status(200).json(n);if(!m||!m.file?.url)return e.status(404).json({error:"Media URL not found in post data"});const d=m.file.url,u=m.preview?.url||"",g=["webm","mp4"].includes(l),h=(m.tags.artist??[]).concat(m.tags.contributor??[]),f=["sound_warning","third-party_edit","conditional_dnp"],y=h.filter((t=>!f.includes(t)));let $="";!m.tags.artist.includes("sound_warning")&&!m.tags.meta.includes("sound")||m.tags.meta.includes("no_sound")||($='<meta property="og:description" content="ðŸ”Š Sound Warning! ðŸ”Š" />');const w=y.length?`${p(y[0])}${y.length>1?" +"+(y.length-1):""}`:"unknown",v=p(u),_=p(d),j=p(i),x=p(o),b=p(s);if("true"===r){const t=`\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <meta charset="UTF-8">\n          <meta name="viewport" content="width=device-width, initial-scale=1.0">\n          <meta property="theme-color" content="#00709e" />\n          <link rel="icon" href="/favicon.ico" />\n          <link rel="apple-touch-icon" href="/favicon.png" />\n          <meta property="title" content="#${x}" />\n          <meta property="al:android:app_name" content="Medium"/>\n          <meta property="article:published_time" content="${p(m.created_at)}"/>\n\n          \x3c!-- Open Graph --\x3e\n          <meta property="og:title" content="#${x} by ${w}" />\n          ${$}\n          <meta property="og:type" content="article" />\n          ${g?`\n            <meta property="og:video" content="${_}" />\n            <meta property="og:video:type" content="video/${l}" />\n            <meta property="og:video:width" content="1280" />\n            <meta property="og:video:height" content="720" />\n            <meta property="og:image" content="${v}" />\n            <meta property="og:site_name" content="Video from ${b} â€¢ e179 (${j})">\n          `:`\n            <meta property="og:image" content="${_}" />\n            <meta property="og:site_name" content="Image from ${b} â€¢ e179 (${j})">\n          `}\n\n          \x3c!-- Twitter --\x3e\n          <meta name="twitter:card" content="${g?"player":"summary_large_image"}" />\n          <meta name="twitter:title" content="Post from ${b}" />\n          ${g?`\n            <meta name="twitter:image" content="${v}" />\n            <meta name="twitter:player" content="${_}" />\n            <meta name="twitter:player:width" content="1280" />\n            <meta name="twitter:player:height" content="720" />\n            <meta name="twitter:player:stream" content="${_}" />\n            <meta name="twitter:player:stream:content_type" content="video/${l}" />\n          `:`\n            <meta name="twitter:image" content="${_}" />\n          `}\n          <noscript><meta http-equiv="refresh" content="0;url=https://${b}/posts/${x}" /></noscript>\n        </head>\n        <body>\n            <article>\n                <h1>Post #${x}</h1>\n                <p>Shared from ${b}</p>\n                <footer>by ${w}</footer>\n            </article>\n        </body>\n        </html>\n      `.trim();return e.setHeader("Content-Type","text/html"),e.status(200).send(t)}const C=await fetch(d,{headers:{"User-Agent":"e179/1.0 (e621 Proxy)"}});if(!C.ok)return e.status(C.status).json({error:"Failed to fetch media file"});const I=await C.arrayBuffer(),k=Buffer.from(I),A=C.headers.get("content-type")||"image/jpeg";return e.setHeader("Content-Disposition",`inline; filename="${o}.${l}"`),e.setHeader("Cache-Control","public, max-age=86400"),e.setHeader("Content-Type",A),e.setHeader("Access-Control-Allow-Origin","*"),e.status(200).send(k)}catch(t){return console.error("Error:",t),e.status(500).json({error:"Failed to fetch from API",details:t.message})}}